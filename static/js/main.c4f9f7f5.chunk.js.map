{"version":3,"sources":["components/LineGraph.jsx","axios.jsx","components/CovidSummary.jsx","App.js","reportWebVitals.js","index.js"],"names":["LineGraph","props","style","width","height","margin","data","labels","label","map","l","substr","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yAxis","axiosInstances","axios","create","baseURL","CovidSummary","totalConfirmed","totalRecoverd","totalDeaths","country","textTransform","display","justifyContent","className","App","useState","setTotalConfirmed","totalRecovered","setTotalRecovered","setTotalDeaths","loading","setLoading","covidSummary","setCovidSummary","days","setDays","setCountry","coronaCount","setCoronaCount","setLabel","useEffect","get","then","res","status","Global","TotalConfirmed","TotalRecovered","TotalDeaths","console","log","catch","error","formatDate","date","d","Date","year","getFullYear","month","getMonth","slice","_date","getDate","getCoronaReportByDateRange","countrySlug","from","to","yAxisCoronaCount","Cases","xAxisLabel","covidDetails","Countries","find","Slug","value","onChange","e","target","setDate","Country","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4f9f7f5.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nfunction LineGraph(props) {\r\n    return (\r\n        <div style={{\r\n                width:\"600px\",\r\n                height:\"600px\",\r\n                margin:\"50px auto\"\r\n        }}\r\n        >\r\n            \r\n            <Line data={{\r\n                labels: props.label.map(l=>l.substr(0,10)),\r\n  datasets: [\r\n            {\r\n                label: 'My First dataset',\r\n                fill: false ,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(75,192,192,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: props.yAxis,\r\n            }\r\n            ]\r\n            }\r\n            }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","import axios from 'axios';\r\n\r\nconst axiosInstances = axios.create({\r\n    baseURL: `https://api.covid19api.com`,\r\n    \r\n});\r\n\r\nexport default axiosInstances;","\r\nimport React from 'react'\r\n// import Card  from './components/Card';\r\nfunction CovidSummary(props) {\r\n\r\nconst {\r\n    totalConfirmed,\r\n            totalRecoverd,\r\n            totalDeaths,\r\n            country\r\n} = props;\r\n\r\n\r\n    return (\r\n        <>\r\n        <div >\r\n          <h1 style={{textTransform:\"capitalize\"}}>{country===''?'Corona Report':country}</h1>\r\n        </div>\r\n        <div style={{\r\n            display:\"flex\",\r\n            justifyContent:\"center\"\r\n        }}>\r\n        <div className=\"card\">\r\n        <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Total Confirmed</h5>\r\n                <p className=\"card-text\">{totalConfirmed}</p>\r\n            </div>\r\n        </div>\r\n        <div className=\"card\">\r\n        <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Total Recovered</h5>\r\n                <p className=\"card-text\">{totalRecoverd}</p>\r\n            </div>\r\n        </div>\r\n        <div className=\"card\">\r\n        <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Total Deaths</h5>\r\n                <p className=\"card-text\">{totalDeaths}</p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CovidSummary\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport LineGraph from './components/LineGraph';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport axios from './axios'\nimport CovidSummary from './components/CovidSummary'\nfunction App() {\n\n  const [totalConfirmed, setTotalConfirmed] = useState(0);\n  const [totalRecovered, setTotalRecovered] = useState(0);\n  const [totalDeaths, setTotalDeaths] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [covidSummary, setCovidSummary] = useState({});\n  const [days, setDays] = useState(7);\n  const [country, setCountry] = useState('');\n  const [coronaCount, setCoronaCount] = useState([]);\n  const [label, setLabel] = useState([]);\n  useEffect(() => {\n    setLoading(true);\n    axios.get('./summary')\n      .then(res => {\n        setLoading(false);\n\n        if (res.status === 200) {\n          setTotalConfirmed(res.data.Global.TotalConfirmed);\n          setTotalRecovered(res.data.Global.TotalRecovered);\n          setTotalDeaths(res.data.Global.TotalDeaths);\n          setCovidSummary(res.data);\n        }\n        console.log(res);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n\n  }, []);\n  const formatDate = (date) => {\n    const d = new Date(date);\n    const year = d.getFullYear();\n    const month = `0${d.getMonth() + 1}`.slice(-2);\n    const _date = d.getDate();\n    return `${year}-${month}-${_date}`;\n  }\n\n  const countryHandler = (e) => {\n    setCountry(e.target.value);\n    const d = new Date();\n    const to = formatDate(d);\n    const from = formatDate(d.setDate(d.getDate() - 7));\n\n    //  console.log(from, to);\n    getCoronaReportByDateRange(e.target.value, from, to);\n  }\n\n  const daysHandler = (e) => {\n    setDays(e.target.value);\n    const d = new Date();\n    const to = formatDate(d);\n    const from = formatDate(d.setDate(d.getDate() - e.target.value));\n    // console.log(country,from,to);\n    getCoronaReportByDateRange(country, from, to);\n  }\n\n  const getCoronaReportByDateRange = (countrySlug, from, to) => {\n    axios.get(`/country/${countrySlug}/status/confirmed?from=${from}T00:00:00Z&to=${to}T00:00:00Z`)\n      .then(res => {\n        console.log(res);\n\n        const yAxisCoronaCount = res.data.map(d => d.Cases);\n        const xAxisLabel = res.data.map(d => d.Date);\n        const covidDetails = covidSummary.Countries.find(country => country.Slug === countrySlug);\n        setCoronaCount(yAxisCoronaCount);\n        setTotalConfirmed(covidDetails.TotalConfirmed);\n        setTotalRecovered(covidDetails.TotalRecovered);\n        setTotalDeaths(covidDetails.TotalDeaths);\n        setLabel(xAxisLabel);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  if (loading) {\n    return <p>Fetching data from api</p>;\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div>\n        <CovidSummary\n          totalConfirmed={totalConfirmed}\n          totalRecoverd={totalRecovered}\n          totalDeaths={totalDeaths}\n          country={country}\n        />\n      </div>\n\n      <div>\n        <select value={country} onChange={countryHandler}>\n          <option value=\" \">- Select Country -</option>\n          {\n            covidSummary.Countries && covidSummary.Countries.map(country =>\n              <option key={country.Slug} value={country.Slug}>{country.Country}</option>\n            )\n          }\n\n        </select>\n        <select value={days} onChange={daysHandler}>\n          <option value=\"7\">\n            Last 7 days Data\n                          </option>\n          <option value=\"30\">\n            Last 30 days Data\n                          </option>\n          <option value=\"90\">\n            Last 90 days Data\n                          </option>\n        </select>\n\n      </div>\n\n      <LineGraph\n        yAxis={coronaCount}\n        label={label}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}